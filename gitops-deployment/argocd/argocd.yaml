apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
  finalizers:
    - argoproj.io/finalizer
  name: openshift-gitops
  namespace: openshift-gitops
spec:
  applicationInstanceLabelKey: "argocd.argoproj.io/instance"
  resourceHealthChecks:
  - group: operators.coreos.com
    kind: CatalogSource
    check: |
      hs = {}
      hs.status = "Progressing"
      hs.message = ""
      if obj.status ~= nil then
        if obj.status.connectionState ~= nil then
          local state = obj.status.connectionState.lastObservedState
          if state == "IDLE" or state == "CONNECTING" then
            hs.status = "Progressing"
            hs.message = "Waiting for CatalogSource to be ready..."
            return hs
          end
          if state == "READY" then
            hs.status = "Healthy"
            hs.message = state
            return hs
          end
        end
      end
      hs.status = "Progressing"
      hs.message = "Provisioning CatalogSource instance..."
      return hs
  - group: automation.websphere.ibm.com
    kind: WebSphereAutomation
    check: |
      hs = {}
      hs.status = "Progressing"
      hs.message = ""
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" and condition.status == "True" then
              hs.status = "Healthy"
              hs.message = condition.message
              return hs
            end
            if condition.type == "Ready" and condition.status == "False" then
              hs.status = "Progressing"
              hs.message = condition.message
              return hs
            end  
          end
        end
      end
      return hs
  - group: automation.websphere.ibm.com
    kind: WebSphereSecure
    check: |
      hs = {}
      hs.status = "Progressing"
      hs.message = ""
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" and condition.status == "True" then
              hs.status = "Healthy"
              hs.message = condition.message
              return hs
            end
            if condition.type == "Ready" and condition.status == "False" then
              hs.status = "Progressing"
              hs.message = condition.message
              return hs
            end  
          end
        end
      end
      return hs
  - group: automation.websphere.ibm.com
    kind: WebSphereHealth
    check: |
      hs = {}
      hs.status = "Progressing"
      hs.message = ""
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" and condition.status == "True" then
              hs.status = "Healthy"
              hs.message = condition.message
              return hs
            end
            if condition.type == "Ready" and condition.status == "False" then
              hs.status = "Progressing"
              hs.message = condition.message
              return hs
            end  
          end
        end
      end
      return hs