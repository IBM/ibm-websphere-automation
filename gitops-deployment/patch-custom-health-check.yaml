kind: ConfigMap
apiVersion: v1
metadata:
  name: argocd-cm
  namespace: argocd
data:
  resource.customizations.health.automation.websphere.ibm.com_WebSphereAutomation: |-
    hs = {}
    hs.status = "Progressing"
    hs.message = ""
    if obj.status ~= nil then
        if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "Ready" and condition.status == "True" then
                    hs.status = "Healthy"
                    hs.message = condition.message
                    return hs
                end
                if condition.type == "Ready" and condition.status == "False" then
                    hs.status = "Progressing"
                    hs.message = condition.message
                    return hs
                end
            end
        end
    end
    return hs
  resource.customizations.health.automation.websphere.ibm.com_WebSphereHealth: |-
    hs = {}
    hs.status = "Progressing"
    hs.message = ""
    if obj.status ~= nil then
        if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "Ready" and condition.status == "True" then
                    hs.status = "Healthy"
                    hs.message = condition.message
                    return hs
                end
                if condition.type == "Ready" and condition.status == "False" then
                    hs.status = "Progressing"
                    hs.message = condition.message
                    return hs
                end
            end
        end
    end
    return hs
  resource.customizations.health.automation.websphere.ibm.com_WebSphereSecure: |-
    hs = {}
    hs.status = "Progressing"
    hs.message = ""
    if obj.status ~= nil then
        if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "Ready" and condition.status == "True" then
                    hs.status = "Healthy"
                    hs.message = condition.message
                    return hs
                end
                if condition.type == "Ready" and condition.status == "False" then
                    hs.status = "Progressing"
                    hs.message = condition.message
                    return hs
                end
            end
        end
    end
    return hs
  resource.customizations.health.operators.coreos.com_CatalogSource: |-
    hs = {}
    hs.status = "Progressing"
    hs.message = ""
    if obj.status ~= nil then
        if obj.status.connectionState ~= nil then
            local state = obj.status.connectionState.lastObservedState
            if state == "IDLE" or state == "CONNECTING" then
                hs.status = "Progressing"
                hs.message = "Waiting for CatalogSource to be ready..."
                return hs
            end
            if state == "READY" then
                hs.status = "Healthy"
                hs.message = state
                return hs
            end
        end
    end
    hs.status = "Progressing"
    hs.message = "Provisioning CatalogSource instance..."
    return hs